Experiment 8
8. Design an Android application to demonstrate fragment lifecycle?
Program:

MainActivity.java:

package com.example.includetagexample;
import androidx.appcompat.app.AppCompatActivity;
import android.os.Bundle;
public class MainActivity extends AppCompatActivity {
 @Override
 protected void onCreate(Bundle savedInstanceState) {
 super.onCreate(savedInstanceState);
 setContentView(R.layout.activity_main);
 }
}

TestFragment.java:

package com.example.includetagexample;
import android.annotation.TargetApi;
import android.app.Activity;
import android.app.Fragment;
import android.os.Build;
import android.os.Bundle;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
@TargetApi(Build.VERSION_CODES.KITKAT)
public class TestFragment extends Fragment {
 private void printLog(String s) {
// display a message in Log File
 Log.d("LifeCycle:", s);
 }
 @Override
 public void onActivityCreated(Bundle savedInstanceState) {
 super.onActivityCreated(savedInstanceState);
 printLog("onActivityCreated Called");
 }
 @Override
 public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle 
savedInstanceState) {
 View v = inflater.inflate(R.layout.fragment_test, container,false);
 printLog("onCreateView Called");
 return v;
 }
 @Override
 public void onViewCreated(View view, Bundle savedInstanceState) {
 super.onViewCreated(view, savedInstanceState);
 printLog("onViewCreated Called");
 }
 @Override
 public void onAttach(Activity activity) {
 super.onAttach(activity);
 printLog("onAttach Called");
 }
 @Override
 public void onCreate(Bundle savedInstanceState) {
 super.onCreate(savedInstanceState);
 printLog("onCreate Called");
 }
 @Override
 public void onDestroy() {
 super.onDestroy();
 printLog("onDestroy Called");
 }
 @Override
 public void onDestroyView() {
 super.onDestroyView();
 printLog("onDestroyView Called");
 }
 @Override
 public void onDetach() {
 super.onDetach();
 printLog("onDetach Called");
 }
@Override
 public void onPause() {
 super.onPause();
 printLog("onPause Called");
 }
 @Override
 public void onResume() {
 super.onResume();
 printLog("onResume Called");
 }
 @Override
 public void onStart() {
 super.onStart();
 printLog("onStart Called");
 }
 @Override
 public void onStop() {
 super.onStop();
 printLog("onStop Called");
 }
}

activity_main.xml:

<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
 xmlns:tools="http://schemas.android.com/tools"
 android:layout_width="match_parent"
 android:layout_height="match_parent"
 android:paddingBottom="@dimen/activity_vertical_margin"
 android:paddingLeft="@dimen/activity_horizontal_margin"
 android:paddingRight="@dimen/activity_horizontal_margin"
 android:paddingTop="@dimen/activity_vertical_margin"
 tools:context=".MainActivity">
 <!-- Take a fragment in our activity -->
 <fragment
 android:id="@+id/test_fragment"
 class="com.example.includetagexample.TestFragment"
 android:layout_width="match_parent"
 android:layout_height="match_parent"
 tools:layout="@layout/fragment_test" />
</RelativeLayout>

Fragment_test.xml:

<?xml version="1.0" encoding="utf-8"?>
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
 android:layout_width="match_parent"
 android:layout_height="match_parent"
 android:orientation="vertical">
 <!-- Create a TextView -->
 <TextView
 android:layout_width="match_parent"
 android:layout_height="match_parent"
 android:gravity="center"
 android:text="Please Check Logcat.!!!"
 android:textColor="#000"
 android:textSize="25sp" />
</LinearLayout>

dimens.xml:
<?xml version="1.0" encoding="utf-8"?>
<resources>
 <!-- Default screen margins, per the Android Design guidelines. -->
 <dimen name="activity_horizontal_margin">16dp</dimen>
 <dimen name="activity_vertical_margin">16dp</dimen>
</resources>
